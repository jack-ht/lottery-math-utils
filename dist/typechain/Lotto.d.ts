/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface LottoInterface extends ethers.utils.Interface {
  functions: {
    "MINIMUM()": FunctionFragment;
    "ORACLE_PAYMENT()": FunctionFragment;
    "RANDOMRESULT()": FunctionFragment;
    "close(uint256)": FunctionFragment;
    "data()": FunctionFragment;
    "fulfill(bytes32)": FunctionFragment;
    "getAlarmAddress()": FunctionFragment;
    "getAlarmJobId()": FunctionFragment;
    "getChainlinkToken()": FunctionFragment;
    "getLotteryAmount()": FunctionFragment;
    "getPlayer(address)": FunctionFragment;
    "getPlayerCount()": FunctionFragment;
    "getPlayers()": FunctionFragment;
    "governance()": FunctionFragment;
    "id()": FunctionFragment;
    "isClosed()": FunctionFragment;
    "isFinished()": FunctionFragment;
    "isOpen()": FunctionFragment;
    "join()": FunctionFragment;
    "open(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "players(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "MINIMUM", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ORACLE_PAYMENT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "RANDOMRESULT",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "close", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "data", values?: undefined): string;
  encodeFunctionData(functionFragment: "fulfill", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "getAlarmAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAlarmJobId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getChainlinkToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLotteryAmount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getPlayer", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getPlayerCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "governance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "id", values?: undefined): string;
  encodeFunctionData(functionFragment: "isClosed", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isFinished",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isOpen", values?: undefined): string;
  encodeFunctionData(functionFragment: "join", values?: undefined): string;
  encodeFunctionData(functionFragment: "open", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "players",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "MINIMUM", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ORACLE_PAYMENT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "RANDOMRESULT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "close", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "data", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fulfill", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAlarmAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAlarmJobId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getChainlinkToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLotteryAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPlayer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPlayerCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPlayers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "governance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "id", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isClosed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isFinished", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isOpen", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "join", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "open", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "players", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "ChainlinkCancelled(bytes32)": EventFragment;
    "ChainlinkFulfilled(bytes32)": EventFragment;
    "ChainlinkRequested(bytes32)": EventFragment;
    "Close(uint256)": EventFragment;
    "Open(uint256,address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PlayerJoined(uint256,address)": EventFragment;
    "Winner(uint256,uint256,uint256,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ChainlinkCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChainlinkFulfilled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChainlinkRequested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Close"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Open"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PlayerJoined"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Winner"): EventFragment;
}

export class Lotto extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: LottoInterface;

  functions: {
    MINIMUM(overrides?: CallOverrides): Promise<[BigNumber]>;

    "MINIMUM()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    ORACLE_PAYMENT(overrides?: CallOverrides): Promise<[BigNumber]>;

    "ORACLE_PAYMENT()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    RANDOMRESULT(overrides?: CallOverrides): Promise<[BigNumber]>;

    "RANDOMRESULT()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    close(
      randomness: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "close(uint256)"(
      randomness: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    data(overrides?: CallOverrides): Promise<[BigNumber]>;

    "data()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    fulfill(
      requestId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "fulfill(bytes32)"(
      requestId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAlarmAddress(overrides?: CallOverrides): Promise<[string]>;

    "getAlarmAddress()"(overrides?: CallOverrides): Promise<[string]>;

    getAlarmJobId(overrides?: CallOverrides): Promise<[string]>;

    "getAlarmJobId()"(overrides?: CallOverrides): Promise<[string]>;

    getChainlinkToken(overrides?: CallOverrides): Promise<[string]>;

    "getChainlinkToken()"(overrides?: CallOverrides): Promise<[string]>;

    getLotteryAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getLotteryAmount()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPlayer(_player: string, overrides?: CallOverrides): Promise<[string]>;

    "getPlayer(address)"(
      _player: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getPlayerCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getPlayerCount()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPlayers(overrides?: CallOverrides): Promise<[string[]]>;

    "getPlayers()"(overrides?: CallOverrides): Promise<[string[]]>;

    governance(overrides?: CallOverrides): Promise<[string]>;

    "governance()"(overrides?: CallOverrides): Promise<[string]>;

    id(overrides?: CallOverrides): Promise<[BigNumber]>;

    "id()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    isClosed(overrides?: CallOverrides): Promise<[boolean]>;

    "isClosed()"(overrides?: CallOverrides): Promise<[boolean]>;

    isFinished(overrides?: CallOverrides): Promise<[boolean]>;

    "isFinished()"(overrides?: CallOverrides): Promise<[boolean]>;

    isOpen(overrides?: CallOverrides): Promise<[boolean]>;

    "isOpen()"(overrides?: CallOverrides): Promise<[boolean]>;

    join(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "join()"(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    open(
      duration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "open(uint256)"(
      duration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    players(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    "players(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  MINIMUM(overrides?: CallOverrides): Promise<BigNumber>;

  "MINIMUM()"(overrides?: CallOverrides): Promise<BigNumber>;

  ORACLE_PAYMENT(overrides?: CallOverrides): Promise<BigNumber>;

  "ORACLE_PAYMENT()"(overrides?: CallOverrides): Promise<BigNumber>;

  RANDOMRESULT(overrides?: CallOverrides): Promise<BigNumber>;

  "RANDOMRESULT()"(overrides?: CallOverrides): Promise<BigNumber>;

  close(
    randomness: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "close(uint256)"(
    randomness: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  data(overrides?: CallOverrides): Promise<BigNumber>;

  "data()"(overrides?: CallOverrides): Promise<BigNumber>;

  fulfill(
    requestId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "fulfill(bytes32)"(
    requestId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAlarmAddress(overrides?: CallOverrides): Promise<string>;

  "getAlarmAddress()"(overrides?: CallOverrides): Promise<string>;

  getAlarmJobId(overrides?: CallOverrides): Promise<string>;

  "getAlarmJobId()"(overrides?: CallOverrides): Promise<string>;

  getChainlinkToken(overrides?: CallOverrides): Promise<string>;

  "getChainlinkToken()"(overrides?: CallOverrides): Promise<string>;

  getLotteryAmount(overrides?: CallOverrides): Promise<BigNumber>;

  "getLotteryAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

  getPlayer(_player: string, overrides?: CallOverrides): Promise<string>;

  "getPlayer(address)"(
    _player: string,
    overrides?: CallOverrides
  ): Promise<string>;

  getPlayerCount(overrides?: CallOverrides): Promise<BigNumber>;

  "getPlayerCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  getPlayers(overrides?: CallOverrides): Promise<string[]>;

  "getPlayers()"(overrides?: CallOverrides): Promise<string[]>;

  governance(overrides?: CallOverrides): Promise<string>;

  "governance()"(overrides?: CallOverrides): Promise<string>;

  id(overrides?: CallOverrides): Promise<BigNumber>;

  "id()"(overrides?: CallOverrides): Promise<BigNumber>;

  isClosed(overrides?: CallOverrides): Promise<boolean>;

  "isClosed()"(overrides?: CallOverrides): Promise<boolean>;

  isFinished(overrides?: CallOverrides): Promise<boolean>;

  "isFinished()"(overrides?: CallOverrides): Promise<boolean>;

  isOpen(overrides?: CallOverrides): Promise<boolean>;

  "isOpen()"(overrides?: CallOverrides): Promise<boolean>;

  join(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "join()"(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  open(
    duration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "open(uint256)"(
    duration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  players(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "players(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "renounceOwnership()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    MINIMUM(overrides?: CallOverrides): Promise<BigNumber>;

    "MINIMUM()"(overrides?: CallOverrides): Promise<BigNumber>;

    ORACLE_PAYMENT(overrides?: CallOverrides): Promise<BigNumber>;

    "ORACLE_PAYMENT()"(overrides?: CallOverrides): Promise<BigNumber>;

    RANDOMRESULT(overrides?: CallOverrides): Promise<BigNumber>;

    "RANDOMRESULT()"(overrides?: CallOverrides): Promise<BigNumber>;

    close(randomness: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "close(uint256)"(
      randomness: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    data(overrides?: CallOverrides): Promise<BigNumber>;

    "data()"(overrides?: CallOverrides): Promise<BigNumber>;

    fulfill(requestId: BytesLike, overrides?: CallOverrides): Promise<void>;

    "fulfill(bytes32)"(
      requestId: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    getAlarmAddress(overrides?: CallOverrides): Promise<string>;

    "getAlarmAddress()"(overrides?: CallOverrides): Promise<string>;

    getAlarmJobId(overrides?: CallOverrides): Promise<string>;

    "getAlarmJobId()"(overrides?: CallOverrides): Promise<string>;

    getChainlinkToken(overrides?: CallOverrides): Promise<string>;

    "getChainlinkToken()"(overrides?: CallOverrides): Promise<string>;

    getLotteryAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "getLotteryAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

    getPlayer(_player: string, overrides?: CallOverrides): Promise<string>;

    "getPlayer(address)"(
      _player: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getPlayerCount(overrides?: CallOverrides): Promise<BigNumber>;

    "getPlayerCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    getPlayers(overrides?: CallOverrides): Promise<string[]>;

    "getPlayers()"(overrides?: CallOverrides): Promise<string[]>;

    governance(overrides?: CallOverrides): Promise<string>;

    "governance()"(overrides?: CallOverrides): Promise<string>;

    id(overrides?: CallOverrides): Promise<BigNumber>;

    "id()"(overrides?: CallOverrides): Promise<BigNumber>;

    isClosed(overrides?: CallOverrides): Promise<boolean>;

    "isClosed()"(overrides?: CallOverrides): Promise<boolean>;

    isFinished(overrides?: CallOverrides): Promise<boolean>;

    "isFinished()"(overrides?: CallOverrides): Promise<boolean>;

    isOpen(overrides?: CallOverrides): Promise<boolean>;

    "isOpen()"(overrides?: CallOverrides): Promise<boolean>;

    join(overrides?: CallOverrides): Promise<void>;

    "join()"(overrides?: CallOverrides): Promise<void>;

    open(duration: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "open(uint256)"(
      duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    players(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "players(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    ChainlinkCancelled(
      id: BytesLike | null
    ): TypedEventFilter<[string], { id: string }>;

    ChainlinkFulfilled(
      id: BytesLike | null
    ): TypedEventFilter<[string], { id: string }>;

    ChainlinkRequested(
      id: BytesLike | null
    ): TypedEventFilter<[string], { id: string }>;

    Close(_id: null): TypedEventFilter<[BigNumber], { _id: BigNumber }>;

    Open(
      _id: null,
      _from: string | null,
      _duration: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber],
      { _id: BigNumber; _from: string; _duration: BigNumber }
    >;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    PlayerJoined(
      _id: null,
      _from: string | null
    ): TypedEventFilter<[BigNumber, string], { _id: BigNumber; _from: string }>;

    Winner(
      _id: null,
      _randomness: null,
      _index: null,
      _from: string | null,
      _amount: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, string, BigNumber],
      {
        _id: BigNumber;
        _randomness: BigNumber;
        _index: BigNumber;
        _from: string;
        _amount: BigNumber;
      }
    >;
  };

  estimateGas: {
    MINIMUM(overrides?: CallOverrides): Promise<BigNumber>;

    "MINIMUM()"(overrides?: CallOverrides): Promise<BigNumber>;

    ORACLE_PAYMENT(overrides?: CallOverrides): Promise<BigNumber>;

    "ORACLE_PAYMENT()"(overrides?: CallOverrides): Promise<BigNumber>;

    RANDOMRESULT(overrides?: CallOverrides): Promise<BigNumber>;

    "RANDOMRESULT()"(overrides?: CallOverrides): Promise<BigNumber>;

    close(
      randomness: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "close(uint256)"(
      randomness: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    data(overrides?: CallOverrides): Promise<BigNumber>;

    "data()"(overrides?: CallOverrides): Promise<BigNumber>;

    fulfill(
      requestId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "fulfill(bytes32)"(
      requestId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAlarmAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "getAlarmAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    getAlarmJobId(overrides?: CallOverrides): Promise<BigNumber>;

    "getAlarmJobId()"(overrides?: CallOverrides): Promise<BigNumber>;

    getChainlinkToken(overrides?: CallOverrides): Promise<BigNumber>;

    "getChainlinkToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    getLotteryAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "getLotteryAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

    getPlayer(_player: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getPlayer(address)"(
      _player: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPlayerCount(overrides?: CallOverrides): Promise<BigNumber>;

    "getPlayerCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    getPlayers(overrides?: CallOverrides): Promise<BigNumber>;

    "getPlayers()"(overrides?: CallOverrides): Promise<BigNumber>;

    governance(overrides?: CallOverrides): Promise<BigNumber>;

    "governance()"(overrides?: CallOverrides): Promise<BigNumber>;

    id(overrides?: CallOverrides): Promise<BigNumber>;

    "id()"(overrides?: CallOverrides): Promise<BigNumber>;

    isClosed(overrides?: CallOverrides): Promise<BigNumber>;

    "isClosed()"(overrides?: CallOverrides): Promise<BigNumber>;

    isFinished(overrides?: CallOverrides): Promise<BigNumber>;

    "isFinished()"(overrides?: CallOverrides): Promise<BigNumber>;

    isOpen(overrides?: CallOverrides): Promise<BigNumber>;

    "isOpen()"(overrides?: CallOverrides): Promise<BigNumber>;

    join(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "join()"(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    open(
      duration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "open(uint256)"(
      duration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    players(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "players(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    MINIMUM(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "MINIMUM()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ORACLE_PAYMENT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ORACLE_PAYMENT()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    RANDOMRESULT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "RANDOMRESULT()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    close(
      randomness: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "close(uint256)"(
      randomness: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    data(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "data()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fulfill(
      requestId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "fulfill(bytes32)"(
      requestId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAlarmAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getAlarmAddress()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAlarmJobId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getAlarmJobId()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getChainlinkToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getChainlinkToken()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLotteryAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getLotteryAmount()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPlayer(
      _player: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPlayer(address)"(
      _player: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPlayerCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getPlayerCount()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPlayers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getPlayers()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    governance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "governance()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    id(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "id()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isClosed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "isClosed()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isFinished(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "isFinished()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isOpen(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "isOpen()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    join(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "join()"(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    open(
      duration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "open(uint256)"(
      duration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    players(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "players(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
